{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","constants.js","containers/App.js","actions.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","CounterButton","color","useState","count","setCount","onClick","prevState","React","memo","Header","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","connect","state","searchField","searchRobots","requestRobots","isPending","error","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","fetch","then","response","json","data","catch","err","useEffect","filteredRobots","filter","robot","toLowerCase","includes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.97f11827.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n\tconsole.log(\"Card List\");\n\treturn (\n\t\t<div>\n\t\t\t{robots.map((user, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Card\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tid={robots[i].id}\n\t\t\t\t\t\tname={robots[i].name}\n\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\n\t);\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n\tconsole.log(\"Search Box\");\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input\n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\n\t\t\t\ttype=\"search\"\n\t\t\t\tplaceholder=\"search robots\"\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { useState } from \"react\";\n\nconst CounterButton = ({ color }) => {\n\tconst [count, setCount] = useState(0);\n\tconsole.log(\"Counter Buttons\");\n\tconst updateCount = () => {\n\t\tsetCount((prevState) => prevState + 1);\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<button color={color} onClick={updateCount}>\n\t\t\t\tCount: {count}\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default React.memo(CounterButton);\n","import React from \"react\";\nimport CounterButton from \"./CounterButton\";\n\nconst Header = (props) => {\n\tconsole.log(\"Header\");\n\n\treturn (\n\t\t<div>\n\t\t\t<h1 className=\"f1\">RoboFriends</h1>\n\t\t\t<div>\n\t\t\t\t<CounterButton color={\"red\"} />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default React.memo(Header);\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport Header from \"../components/Header\";\nimport \"./App.css\";\n\nimport { setSearchfield, requestRobots } from \"../actions\";\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchfield(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots()),\n\t};\n};\n\nfunction App(props) {\n\tconst { searchField, onSearchChange, robots, isPending } = props;\n\n\tuseEffect(() => {\n\t\tprops.onRequestRobots();\n\t}, []);\n\n\tconst filteredRobots = robots.filter((robot) => {\n\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t});\n\n\treturn robots.isPending ? (\n\t\t<h1>Loading</h1>\n\t) : (\n\t\t<div className=\"tc\">\n\t\t\t<Header />\n\t\t\t<SearchBox searchChange={onSearchChange} />\n\t\t\t<Scroll>\n\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t</Scroll>\n\t\t</div>\n\t);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nexport const setSearchfield = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\n\tfetch(\"https://jsonplaceholder.typicode.com/users\")\n\t\t.then((response) => response.json())\n\t\t.then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n\t\t.catch((err) => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }));\n};\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nconst initialStateSearch = {\n\tsearchField: \"\",\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n\tswitch (action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: \"\",\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n\tswitch (action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, { isPending: true });\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, {\n\t\t\t\trobots: action.payload,\n\t\t\t\tisPending: false,\n\t\t\t});\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, {\n\t\t\t\terror: action.payload,\n\t\t\t\tisPending: false,\n\t\t\t});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport { Provider, connnect } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport \"tachyons\";\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById(\"root\")\n);\nregisterServiceWorker();\n"],"sourceRoot":""}